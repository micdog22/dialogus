namespace Dialogus.Core; public class VariableStore{ private readonly Dictionary<string,Value> _vars; public VariableStore(Dictionary<string,Value>? initial=null)=>_vars=initial??new(); public bool TryGet(string name,out Value value)=>_vars.TryGetValue(name,out value!); public void Set(string name,Value v)=>_vars[name]=v;} public class DialogueRunner{ private readonly DialogueDocument _doc; private readonly VariableStore _store; private DialogueNode? _node; private int _ip; private bool _ended; public DialogueRunner(DialogueDocument doc,VariableStore store){_doc=doc;_store=store;} public DialogueState State{get;private set;}=new DialogueState.Idle(); public void Start(string nodeName){ if(!_doc.Nodes.TryGetValue(nodeName,out _node)) throw new ArgumentException($"Nó não encontrado: {nodeName}"); _ip=0; _ended=false; Advance(); } public void Next(){ if(_ended) return; if(State is not DialogueState.Line) throw new InvalidOperationException("Next após fala."); _ip++; Advance(); } public void Choose(int index){ if(_ended) return; if(State is not DialogueState.Choices ch) throw new InvalidOperationException("Choose sem opções."); if(index<0||index>=ch.Options.Count) throw new ArgumentOutOfRangeException(nameof(index)); Jump(ch.Options[index].TargetNode); Advance(); } private void Advance(){ while(!_ended && _node!=null && _ip<_node.Instructions.Count){ var ins=_node.Instructions[_ip]; switch(ins){ case Say s: State=new DialogueState.Line(Template.Apply(s.Text,_store)); return; case ChoiceList cl: State=new DialogueState.Choices(cl.Options); return; case SetVar sv: _store.Set(sv.Name,sv.Literal); _ip++; continue; case Goto gt: Jump(gt.TargetNode); continue; case If iff: if(Eval(iff.Cond)){ var exp=new List<IDialogueInstruction>(_node.Instructions); exp.RemoveAt(_ip); exp.InsertRange(_ip,iff.Then); _node=new DialogueNode{ Name=_node.Name, Instructions=exp }; continue; } else { _ip++; continue; } default: _ip++; continue; } } State=new DialogueState.End(); _ended=true; } private void Jump(string target){ if(!_doc.Nodes.TryGetValue(target,out _node)) throw new Exception($"Nó alvo não encontrado: {target}"); _ip=0; } private bool Eval(Condition c)=> c switch{ Condition.Var v=>Truthy(Get(v.Name)), Condition.Eq eq=>Eq(Get(eq.Name),eq.Literal), Condition.Neq ne=>!Eq(Get(ne.Name),ne.Literal), _=>false }; private Value Get(string name)=> _store.TryGet(name,out var v)? v: new Value.Bool(false); private static bool Eq(Value a,Value b)=>(a,b) switch{ (Value.Bool x,Value.Bool y)=>x.V==y.V, (Value.Num x,Value.Num y)=>x.V==y.V, (Value.Str x,Value.Str y)=>string.Equals(x.V,y.V,StringComparison.Ordinal), _=>false }; private static bool Truthy(Value v)=> v switch{ Value.Bool b=>b.V, Value.Num n=>n.V!=0, Value.Str s=>!string.IsNullOrEmpty(s.V), _=>false }; } public abstract record DialogueState{ public sealed record Idle:DialogueState; public sealed record Line(string Text):DialogueState; public sealed record Choices(IReadOnlyList<Dialogus.Core.Choice> Options):DialogueState; public sealed record End:DialogueState; }