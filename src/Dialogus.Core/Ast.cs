namespace Dialogus.Core; public class DialogueDocument{public Dictionary<string, DialogueNode> Nodes{get;}=new(StringComparer.OrdinalIgnoreCase);} public class DialogueNode{public required string Name{get;init;} public List<IDialogueInstruction> Instructions{get;init;}=new();} public interface IDialogueInstruction{} public record Say(string Text):IDialogueInstruction; public record Choice(string Text,string TargetNode); public record ChoiceList(List<Choice> Options):IDialogueInstruction; public record SetVar(string Name, Value Literal):IDialogueInstruction; public record Goto(string TargetNode):IDialogueInstruction; public record If(Condition Cond,List<IDialogueInstruction> Then):IDialogueInstruction; public abstract record Value{public sealed record Str(string V):Value; public sealed record Num(int V):Value; public sealed record Bool(bool V):Value;} public abstract record Condition{public sealed record Var(string Name):Condition; public sealed record Eq(string Name,Value Literal):Condition; public sealed record Neq(string Name,Value Literal):Condition;}