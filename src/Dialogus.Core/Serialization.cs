using System.Text.Json; using System.Text.Json.Serialization; namespace Dialogus.Core; public static class DialogueSerializer{ public static string ToJson(DialogueDocument doc){ var opts=new JsonSerializerOptions{ WriteIndented=true, Converters={ new InstrConverter(), new ValueConverter(), new CondConverter() } }; return JsonSerializer.Serialize(doc,opts);} public static DialogueDocument FromJson(string json){ var opts=new JsonSerializerOptions{ Converters={ new InstrConverter(), new ValueConverter(), new CondConverter() } }; return JsonSerializer.Deserialize<DialogueDocument>(json,opts)!;} class InstrConverter:JsonConverter<IDialogueInstruction>{ public override IDialogueInstruction Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options){ using var doc=JsonDocument.ParseValue(ref reader); var root=doc.RootElement; var kind=root.GetProperty("kind").GetString(); return kind switch{ "say"=> new Say(root.GetProperty("text").GetString()??""), "choiceList"=> new ChoiceList(root.GetProperty("options").EnumerateArray().Select(o=> new Choice(o.GetProperty("text").GetString()??"", o.GetProperty("targetNode").GetString()??"" )).ToList()), "set"=> new SetVar(root.GetProperty("name").GetString()??"", ReadValue(root.GetProperty("value"))), "goto"=> new Goto(root.GetProperty("targetNode").GetString()??""), "if"=> new If(ReadCond(root.GetProperty("cond")), root.GetProperty("then").EnumerateArray().Select(e=> JsonSerializer.Deserialize<IDialogueInstruction>(e,options)!).ToList()), _=> throw new NotSupportedException() }; } public override void Write(Utf8JsonWriter w, IDialogueInstruction v, JsonSerializerOptions o){ w.WriteStartObject(); switch(v){ case Say s: w.WriteString("kind","say"); w.WriteString("text",s.Text); break; case ChoiceList cl: w.WriteString("kind","choiceList"); w.WritePropertyName("options"); w.WriteStartArray(); foreach(var c in cl.Options){ w.WriteStartObject(); w.WriteString("text",c.Text); w.WriteString("targetNode",c.TargetNode); w.WriteEndObject(); } w.WriteEndArray(); break; case SetVar sv: w.WriteString("kind","set"); w.WriteString("name",sv.Name); w.WritePropertyName("value"); WriteValue(w,sv.Literal); break; case Goto g: w.WriteString("kind","goto"); w.WriteString("targetNode",g.TargetNode); break; case If f: w.WriteString("kind","if"); w.WritePropertyName("cond"); WriteCond(w,f.Cond); w.WritePropertyName("then"); w.WriteStartArray(); foreach(var ins in f.Then) JsonSerializer.Serialize(w,ins,o); w.WriteEndArray(); break; } w.WriteEndObject(); } } class ValueConverter:JsonConverter<Value>{ public override Value Read(ref Utf8JsonReader r, Type t, JsonSerializerOptions o){ using var doc=JsonDocument.ParseValue(ref r); var root=doc.RootElement; return (root.GetProperty("kind").GetString()) switch{ "str"=> new Value.Str(root.GetProperty("v").GetString()??""), "num"=> new Value.Num(root.GetProperty("v").GetInt32()), "bool"=> new Value.Bool(root.GetProperty("v").GetBoolean()), _=> throw new NotSupportedException() }; } public override void Write(Utf8JsonWriter w, Value v, JsonSerializerOptions o){ w.WriteStartObject(); switch(v){ case Value.Str s: w.WriteString("kind","str"); w.WriteString("v",s.V); break; case Value.Num n: w.WriteString("kind","num"); w.WriteNumber("v",n.V); break; case Value.Bool b: w.WriteString("kind","bool"); w.WriteBoolean("v",b.V); break; } w.WriteEndObject(); } } class CondConverter:JsonConverter<Condition>{ public override Condition Read(ref Utf8JsonReader r, Type t, JsonSerializerOptions o){ using var doc=JsonDocument.ParseValue(ref r); var root=doc.RootElement; return (root.GetProperty("kind").GetString()) switch{ "var"=> new Condition.Var(root.GetProperty("name").GetString()??""), "eq"=> new Condition.Eq(root.GetProperty("name").GetString()??"", ReadValue(root.GetProperty("value"))), "neq"=> new Condition.Neq(root.GetProperty("name").GetString()??"", ReadValue(root.GetProperty("value"))), _=> throw new NotSupportedException() }; } public override void Write(Utf8JsonWriter w, Condition c, JsonSerializerOptions o){ w.WriteStartObject(); switch(c){ case Condition.Var v: w.WriteString("kind","var"); w.WriteString("name",v.Name); break; case Condition.Eq eq: w.WriteString("kind","eq"); w.WriteString("name",eq.Name); w.WritePropertyName("value"); WriteValue(w,eq.Literal); break; case Condition.Neq ne: w.WriteString("kind","neq"); w.WriteString("name",ne.Name); w.WritePropertyName("value"); WriteValue(w,ne.Literal); break; } w.WriteEndObject(); } } static Value ReadValue(JsonElement e)=> (e.GetProperty("kind").GetString()) switch{ "str"=> new Value.Str(e.GetProperty("v").GetString()??""), "num"=> new Value.Num(e.GetProperty("v").GetInt32()), "bool"=> new Value.Bool(e.GetProperty("v").GetBoolean()), _=> throw new NotSupportedException() }; static void WriteValue(Utf8JsonWriter w, Value v){ switch(v){ case Value.Str s: w.WriteStartObject(); w.WriteString("kind","str"); w.WriteString("v",s.V); w.WriteEndObject(); break; case Value.Num n: w.WriteStartObject(); w.WriteString("kind","num"); w.WriteNumber("v",n.V); w.WriteEndObject(); break; case Value.Bool b: w.WriteStartObject(); w.WriteString("kind","bool"); w.WriteBoolean("v",b.V); w.WriteEndObject(); break; } } static void WriteCond(Utf8JsonWriter w, Condition c){ switch(c){ case Condition.Var v: w.WriteStartObject(); w.WriteString("kind","var"); w.WriteString("name",v.Name); w.WriteEndObject(); break; case Condition.Eq eq: w.WriteStartObject(); w.WriteString("kind","eq"); w.WriteString("name",eq.Name); w.WritePropertyName("value"); WriteValue(w,eq.Literal); w.WriteEndObject(); break; case Condition.Neq ne: w.WriteStartObject(); w.WriteString("kind","neq"); w.WriteString("name",ne.Name); w.WritePropertyName("value"); WriteValue(w,ne.Literal); w.WriteEndObject(); break; } } }