using Dialogus.Core; if(args.Length==0){Console.WriteLine("Dialogus CLI\nUsage:\n  validate <file.dlg>\n  compile <file.dlg> -o <out.json>\n  run <file.dlg> --node <name> [--var key=value ...]"); return;} string? Arg(string n){for(int i=0;i<args.Length-1;i++) if(args[i]==n) return args[i+1]; return null;} IEnumerable<string> Multi(string n){ for(int i=0;i<args.Length;i++) if(args[i]==n && i+1<args.Length) yield return args[i+1]; } var cmd=args[0]; switch(cmd){ case "validate": { var path=args.ElementAtOrDefault(1)??throw new ArgumentException("faltou arquivo .dlg"); var text=File.ReadAllText(path); var doc=DialogueParser.Parse(text); Console.WriteLine($"OK: {doc.Nodes.Count} nó(s)."); break;} case "compile": { var path=args.ElementAtOrDefault(1)??throw new ArgumentException("faltou arquivo .dlg"); var outPath=Arg("-o")??throw new ArgumentException("faltou -o <out.json>"); var text=File.ReadAllText(path); var doc=DialogueParser.Parse(text); var json=DialogueSerializer.ToJson(doc); Directory.CreateDirectory(Path.GetDirectoryName(outPath)!); File.WriteAllText(outPath,json); Console.WriteLine($"Gerado: {outPath}"); break;} case "run": { var path=args.ElementAtOrDefault(1)??throw new ArgumentException("faltou arquivo .dlg"); var node=Arg("--node")??"intro"; var text=File.ReadAllText(path); var doc=DialogueParser.Parse(text); var vars=new Dictionary<string,Value>(); foreach(var kv in Multi("--var")){ var idx=kv.IndexOf('='); if(idx>0) vars[kv[..idx]]= new Value.Str(kv[(idx+1)..]); } var store=new VariableStore(vars); var runner=new DialogueRunner(doc,store); runner.Start(node); while(true){ switch(runner.State){ case DialogueState.Line line: Console.WriteLine(line.Text); Console.WriteLine("[ENTER]"); Console.ReadLine(); runner.Next(); break; case DialogueState.Choices ch: for(int i=0;i<ch.Options.Count;i++) Console.WriteLine($"[{i}] {ch.Options[i].Text}"); Console.Write("Escolha: "); if(int.TryParse(Console.ReadLine(), out int idx) && idx>=0 && idx<ch.Options.Count) runner.Choose(idx); else Console.WriteLine("Opção inválida."); break; case DialogueState.End: Console.WriteLine("(fim)"); return; default: return; } } } default: Console.WriteLine($"Comando desconhecido: {cmd}"); break; }